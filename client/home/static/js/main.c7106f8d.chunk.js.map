{"version":3,"sources":["page/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","React","createRef","className","onClick","e","window","location","href","App","style","height","width","Boolean","hostname","match","WebFont","load","google","families","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAoDeA,MA5Cf,WAMA,OAJcC,IAAMC,YACHD,IAAMC,YACND,IAAMC,YAGnB,yBAAKC,UAAU,aACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,YAEX,yBAAKA,UAAU,YACVC,QAAS,SAAAC,GACNC,OAAOC,SAASC,KAAO,0CAE3B,6BACI,kBAAC,IAAD,CAAYL,UAAU,eAE1B,6BACI,4EAKR,yBAAKA,UAAU,YACVC,QAAS,SAAAC,GACNC,OAAOC,SAASC,KAAO,0CAE3B,6BACI,kBAAC,IAAD,CAAaL,UAAU,eAE3B,6BACI,0E,MClBTM,MAbf,WAGA,OACA,yBAAKN,UAAU,gBAAgBO,MAAO,CAACC,OAAO,QAAQC,MAAM,UACzD,yBAAKT,UAAU,SACV,kBAAC,EAAD,SCHYU,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2D,0BCRNC,EAAQC,KAAK,CACTC,OAAQ,CACNC,SAAU,CAAC,WAAW,4BAA4B,aAAa,WAAW,QAAQ,YAIxFC,IAASC,OACC,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGVC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7106f8d.chunk.js","sourcesContent":["import React from 'react';\nimport {FaWarehouse,FaUserEdit,FaUsers,FaChartLine,FaStoreAlt} from 'react-icons/fa';\nimport {MdSettingsApplications,MdShoppingCart} from 'react-icons/md';\nimport {Link} from 'react-router-dom';\n\nimport './Home.css'\n\n\nfunction Home() {\n\nconst refUser=React.createRef()\nconst refOldShop=React.createRef()\nconst refNewShop=React.createRef()\n\nreturn (\n    <div className=\"home-hero\">\n        <div className=\"home-bg-screen\">\n            <div className=\"home-box\">\n                \n                <div className=\"home-link\"\n                     onClick={e=>{\n                        window.location.href = 'http://varaporn.net/newpage/basicdata'\n                        }}>\n                    <div>\n                        <FaStoreAlt className=\"home-icon\"/>\n                    </div>\n                    <div>\n                        <h3>ร้านนอก</h3>\n                    </div>\n                </div>\n\n    \n                <div className=\"home-link\"\n                     onClick={e=>{\n                        window.location.href = 'http://varaporn.net/oldpage/basicdata'\n                     }}>\n                    <div>\n                        <FaWarehouse className=\"home-icon\"/>\n                    </div>\n                    <div>\n                        <h4>ร้านใน</h4>\n                    </div>\n                </div>\n\n         \n            </div>\n        </div>\n\n    </div>\n)\n}\n\nexport default Home;\n/*\n<div className=\"home-link\"\nonClick={e=>{refProduct.current.click()}}>\n<div>\n   <FaWarehouse className=\"home-icon\"/>\n</div>\n<div>\n   <h3>คลังสินค้า</h3>\n</div>\n</div>\n*/","\nimport React from 'react';\n\nimport Home from './page/home/Home'\n\n//import Product from './page/product/Product'\n\nimport './App2.css'\n\nfunction App() {\n\n\nreturn(\n<div className=\"bgc-lightGray\" style={{height:\"100vh\",width:\"100vw\"}}>\n   <div className=\"h-100\">\n        <Home/>\n   </div>\n\n</div>\n)\n\n}\nexport default App;\n\n/*\n\n\n\n\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n    google: {\n      families: ['Tomorrow','Titillium Web:300,400,700','sans-serif','Tomorrow','kanit','Rubik']\n    }\n});\n\nReactDOM.render(\n          <BrowserRouter>\n            <App/>\n          </BrowserRouter>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}